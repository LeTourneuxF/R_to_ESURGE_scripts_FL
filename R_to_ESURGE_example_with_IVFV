
#Code adapted from the 'first steps.txt' file from Rémi Choquet for the R to E-SURGE function
#Working directory, results from E-SURGE runs will be saved to that directory 
setwd('C:\\.....')

###################
#  with R: example 2
###################

library('R.matlab')

## Connect to each of them
matlab1 <- Matlab(port=9999); open(matlab1)

## Open a headed file with E-SURGE (important to do before trying to load the model!)
#Numbers at the end of the data loading command: (file type, nothing, nothing, noting, #states, #events)
#File type: 1- Biomeco; 2- mark; 3- headed
#Biomeco format does not prompt a window asking for covariates, so this file format should be used if you want to load multiple datasets for multiple iterations uninterrupted

evaluate(matlab1, "[his,eff,autre]=esurge_data_from_file('C:/Users/Frederic Letourneaux/Documents/Doc/Data/2019 Hiver/simul10/iter1/','CH_sim_iter1.rh',1,1,1,50,7,4)")
#evaluate(matlab1, "[his,eff,autre]=esurge_data_from_file('C:/Users/Frederic Letourneaux/Documents/Doc/Data/2019 Hiver/simul8/iter1/','CH_sim_iter1.prn',2,1,1,50,7,4)")

#Look at your data
res <- getVariable(matlab1, c("his", "eff", "autre"))
print(res$his)
print(res$eff)

##Load the model a first time from an excel file (preivously run model)
evaluate(matlab1,"[modeldef,datadef,phrasedef,ivfvdef]=esurge_model('C:/Users/Frederic Letourneaux/Documents/Doc/Data/2019 Hiver/simul10/','iter1_fallrec', autre)")
#get the model definition in R
mod<-getVariable(matlab1,'modeldef')


#Extract the number of parameters to estimate
n.pars<-length(mod[[1]][[3]][[1]]$paramath)

#Number of iterations
n.iter<-5

#Matrices and vectors to store results
result.biol    <-matrix(NA, ncol=n.iter, nrow=n.pars)
result.real    <-matrix(NA, ncol=n.iter, nrow=n.pars)
sigma          <-matrix(NA, ncol=n.iter, nrow=n.pars)
sigmaplus      <-matrix(NA, ncol=n.iter, nrow=n.pars)
sigmamoins     <-matrix(NA, ncol=n.iter, nrow=n.pars)
initial_values <-matrix(NA, ncol=n.iter, nrow=n.pars)
devi           <-rep(NA, length=n.iter)


#Roger, j'ai commenté le script de cette fonction mais c'est un peu complexe et très appliqué à mon jeu de données.
#Tu as peut-être déjà une idée de comment généréer des valeurs initiales appliquées à d'autres problèmes
IV<-function(fulltime,sumrec){
  
  #Numéros des saisons
  n.occasions<-41
  summer<-seq(4,n.occasions,4)
  fall <- seq(1,n.occasions,4)
  winter<-seq(2,n.occasions,4)
  spring<-seq(3,n.occasions,4)
  

  #Identifiant du numero de saison
  #avec nouvelle parametrisation, été:4, automne:1, hiver:2, printemps:3
  
  #fulltime me permet de changer le nombre de survies à estimer (4 si on fait survie constante par saison, ou 40 si on a un modèle temps complet)
  if(fulltime==T){
    su<-summer
    fa<-fall
    wi<-winter
    sp<-spring
    
  } else{
    su<-4
    fa<-1
    wi<-2
    sp<-3
    
  }
  
  
  #Valeurs initiales pour les survies pour chaque saison - tiré d'une distr. uniforme avec des bornes choisies arbitrairement
  S_su<-function(){runif(length(su),0.96,1)}
  
  if(fulltime==T){
    S_fa<-function(){runif(length(fa[1:10]),0.92,0.98)}
  }else{
    S_fa<-function(){runif(length(fa),0.92,0.98)}
  }
  S_wi<-function(){runif(length(wi),0.85,0.95)}
  S_sp<-function(){runif(length(sp),0.9,0.95)}
  
  
  #Number of estimates for each parameter
  n.inits<-3
  
  n.cols<-1  #TR
  n.survs<-length(S_su())+length(S_fa())+length(S_wi())+length(S_sp()) # fulltime:39, otherwise 4
  
  #nombre de transitions
  n.trs<-n.cols+n.survs
  
  #Nombre de recaptures physiques
  n.recap<-21      #EV
  
  #Si on garde les reprises à l'été, ça change le nombre de taux de reprises à estimer
  if(sumrec==T){
    n.recband<-40    #EV
    n.reccol<-40     #EV
    n.others<-2      #EV
    
  }else{
    n.recband<-30    #EV
    n.reccol<-30     #EV
    n.others<-4      #EV
    
  }
  
  #Observations de colliers
  n.obscol<-39     #EV
  n.obs.hunt <-39  #EV
  
  n.events<-n.recap + n.recband + n.reccol + n.obscol + n.obs.hunt + n.others 
  
  npars<-n.events+n.trs+n.inits
  
  IVFV<-matrix(NA, nrow=npars,ncol=3)
  
  IVFV<-as.data.frame(IVFV)
  
  ###(fix or init (2 or 0) values column, parameter initial value, name of parameter)
  colnames(IVFV)<-c("V1","V2","par")
  
  IVFV$V1<-0
  
  #Assigner les noms de paramètres aux lignes - plus facile pour s'y retrouver après. Mais pas absolument nécessaire. 
  #Il faut surtout s'assurer que les paramètres sont dans le bon ordre (le même que généré par E-SURGE)
  IVFV$par[1:n.inits]<-'I'
  
  #Insérer ligne pour repérer switch aux transitions, cette ligne sera enlevée par la suire
  IVFV<-InsertRow(IVFV, NewRow = c(55,55,55), RowNum = (n.inits+1))
  
  #Assign collar
  IVFV$par[min(which(is.na(IVFV$par))) :(min(which(is.na(IVFV$par)))+n.cols-1)]<-'C'
  
  #Assign Survival
  IVFV$par[(max(which(IVFV$par=='C'))+1):(max(which(IVFV$par=='C'))+n.survs)]<-'S'
  
  #Insérer ligne pour marquer où va le '#' entre transitions et évènements, cette ligne sera enlevée par la suite
  IVFV<-InsertRow(IVFV, NewRow = c(55,55,55), RowNum = (max(which(IVFV$par=='S'))+1))
  
  #Assign recapture
  IVFV$par[(max(which(IVFV$par=='55'))+1):(max(which(IVFV$par=='55'))+n.recap)]<-'recap'
  
  #Assign band recovery
  IVFV$par[(max(which(IVFV$par=='recap'))+1):(max(which(IVFV$par=='recap'))+n.recband)]<-'recband'
  
  #Assign col.obs
  IVFV$par[(max(which(IVFV$par=='recband'))+1):(max(which(IVFV$par=='recband'))+n.obscol)]<-'pobs'
  
  #Assign col.obs prob if dead
  IVFV$par[(max(which(IVFV$par=='pobs'))+1):(max(which(IVFV$par=='pobs'))+n.obs.hunt)]<-'pobs.dead'
  
  #Assign col recov
  IVFV$par[(max(which(IVFV$par=='pobs.dead'))+1):(max(which(IVFV$par=='pobs.dead'))+n.reccol)]<-'reccol'
  
  #Last ones to fix at 0
  IVFV$par[(max(which(IVFV$par=='reccol'))+1):(max(which(IVFV$par=='reccol'))+n.others)]<-'fix0'
  #####
  
  
  
  #Assign Initial Values
  
  #Randomize everything
  IVFV[,2]<-runif(nrow(IVFV),0,1)
  
  # Initial state
  IVFV[which(IVFV$par=='I'),2][1]<-0.3
  IVFV[which(IVFV$par=='I'),2][2]<-0.6  
  IVFV[which(IVFV$par=='I'),2][3]<-runif(length(which(IVFV$par=='I'))-2,0,0.1)
  
  
  # Collar loss
  IVFV[which(IVFV$par=='C'),2]<-runif(length(which(IVFV$par=='C')),0,0.1)
  
  # Values between .85 and 1 for survival
  
  #This is for assigning specific values for the survival in different seasons, based on the function and values chosen higher.
  #but it might be a bit much and not necessary,
  #This could also do the trick just fine: IVFV[which(IVFV$par=='S'),2]<-runif(length(which(IVFV$par=='S')),0.85,1)
  IVFV[which(IVFV$par=='S')[wi],2]<-S_wi()
  IVFV[which(IVFV$par=='S')[sp],2]<-S_sp()
  IVFV[which(IVFV$par=='S')[su],2]<-S_su()
  if(fulltime==T){
    IVFV[which(IVFV$par=='S')[fa[1:10]],2]<-S_fa()
    
  }else{
    IVFV[which(IVFV$par=='S')[fa],2]<-S_fa()
  }
  
  #recap probs
  IVFV[which(IVFV$par=='recap'),2]<-runif(length(which(IVFV$par=='recap')),0.01,0.2)
  
  #col obs probs
  IVFV[which(IVFV$par=='pobs'),2]<-runif(length(which(IVFV$par=='pobs')),0.35,0.6)
  
  #col obs dead probs
  IVFV[which(IVFV$par=='pobs.dead'),2]<-runif(length(which(IVFV$par=='pobs.dead')),0.1,0.4)
  
  # Fix first capt at 1 - for the R to E-SURGE script, you need to delete the lines for parameters that are fixed and specify them elsewhere
  # This line will thus be removed 
  #Assign
  IVFV[min(which(IVFV$par=='recap')),2]<-1
  #Fix
  IVFV[min(which(IVFV$par=='recap')),1]<-2
  
  
  #recovery probs
  IVFV[which(IVFV$par=='recband'),]$V2<-runif(length(which(IVFV$par=='recband')),0.2,0.5)
  IVFV[which(IVFV$par=='reccol'),]$V2<-runif(length(which(IVFV$par=='reccol')),0.2,0.5)
  
  #fix?
  #IVFV[which(IVFV$par=='recband'),]$V1<-2
  #IVFV[which(IVFV$par=='reccol'),]$V1<-2
  
  
  #Fixed values - this will be removed from the initial values vector before passing to E-SURGE
  IVFV[which(IVFV$par=='fix0'),]$V2<-0
  IVFV[which(IVFV$par=='fix0'),]$V1<-2
  
  
  
  IV.file<-as.matrix(IVFV[,1:2])
  
  #select only lines with parameters that are not fixed (column V1==0)
  init.vals<-as.vector(IV.file[which(IV.file[,1]==0),2])
  
  #Transform on the real scale
  init.real<-log(init.vals/(1-init.vals))
  
  return(init.real=init.real)
  
}

#Loop for running model with multiple initial values
for(i in 1:n.iter){
  

  ##Load the model from excel for each iteration to make sure no information from previous runs is carried along
  evaluate(matlab1,"[modeldef,datadef,phrasedef,ivfvdef]=esurge_model('C:/Users/Frederic Letourneaux/Documents/Doc/Data/2019 Hiver/simul10/','iter1_fallrec', autre)")

  #Fix parameters
  evaluate(matlab1,"strI=phrasedef{1};strT=phrasedef{2};strC=phrasedef{3};NumSC=phrasedef{4};strSC=phrasedef{5};list_cluster=datadef{1},filenamex=phrasedef{6}")
  evaluate(matlab1,"[modeldef,sep]=esurge_gemaco(modeldef,strI,strT,strC,NumSC,strSC,list_cluster,filenamex)")

  #indices of parameter to fix (real scale); indices of parameter to fix (biol scale); values for each (rl scale); values for each (biol scale)
  evaluate(matlab1,"indR=[];indB=[9 188 189];valR=[];valB=[1 0 0];") 

  #Write fixed values to model definition
  evaluate(matlab1,"[modeldef,ivfvdef]=esurge_ivfv(modeldef,sep,indR,indB,valR,valB)")

  #Function to attribute initial values. 
  #Important that they are in the right order. Also best if stored as a vector (matrices do not work so well right now)
  #IVs need to be on the real scale!
  init.val<-IV(fulltime=F, sumrec=T)

  #Send IVs to matlab
  setVariable(matlab1,x=init.val);
  evaluate(matlab1,"model=modeldef{3};")

  #Write IVs to model definition
  evaluate(matlab1,"model.paramath=x;");

  #Display IVs to make sure all is ok in the matlab window
  evaluate(matlab1,"display(model.paramath);")


  evaluate(matlab1,"modeldef{3}=model;")


  ##############################################################################
  # Fitting a Multi-event model with
  # 	nt=1 : computation of the proportion in each state (otherwise nt=0)
  #       mecond=0 : conditionaly to the first capture
  ##############################################################################
  evaluate(matlab1,"nt=1; mecond=0;")

  #Run the model
  evaluate(matlab1,"[dev0, para0, modeldef,sigma,sigmaplus,sigmamoins]=esurge_run(his,eff,autre,modeldef,nt,mecond,'FIT RANK');")

  #If you want to calculate CI you can call the next line:
  #evaluate(matlab1,"[dev0, para0, modeldef,sigma,sigmaplus,sigmamoins]=esurge_run(his,eff,autre,modeldef,nt,mecond,'CI');")
  #This can also be put in the same command line this way: 'FIT CI RANK'


  #Extract results to R
  res <- getVariable(matlab1,c("dev0","para0",'sigma','sigmaplus', 'sigmamoins'))

  #apply the logit to para0 to get the probabilities
  result.biol[,i]<-exp(res$para0)/(exp(res$para0)+1)
  result.real[,i]<-res$para0

  devi[i]<-res$dev0

  sigma[,i]<-res$sigma
  sigmaplus[,i]<-res$sigmaplus
  sigmamoins[,i]<-res$sigmamoins

  initial_values[,i]<-init.val


}#End iteration loop

#If results to be stored in different files for each iteration, can use the script below directly in the loop
#set i to 1 if only needed once.
i=1


#Give name of file to store results in
mod_run<-"name_of_your_model"
#save results
write.table(result.biol, file=paste(mod_run,i,'_result_biol.txt', sep=''), col.names = T, row.names = T)
write.table(result.real, file=paste(mod_run,i,'_result_real.txt', sep=''), col.names = T, row.names = T)
write.table(sigma, file=paste(mod_run,i,'_sigma.txt', sep=''), col.names = T, row.names = T)
write.table(sigmaplus, file=paste(mod_run,i,'_sigmaplus.txt', sep=''), col.names = T, row.names = T)
write.table(sigmamoins, file=paste(mod_run,i,'_sigmamoin.txt', sep=''), col.names = T, row.names = T)
write.table(devi, file=paste(mod_run,i,'_deviance.txt', sep=''), col.names = T, row.names = T)





